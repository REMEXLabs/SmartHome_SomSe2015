apply plugin: 'com.android.application'

android {
    signingConfigs {
        config {
            keyAlias 'vergissmeinnicht'
            keyPassword 'fjn3Kn#n:_n3kf'
            storeFile file('../vergissmeinnicht_keystore.jks')
//            storeFile file('D:/Daten/Code/Android Studio/vergissmeinnicht/vergissmeinnicht_keystore.jks')
            storePassword 'fjn3Kn#n:_n3kf'
        }
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "de.hdm.vergissmeinnicht"
        minSdkVersion 16
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        signingConfig signingConfigs.config
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            signingConfig signingConfigs.config
        }
    }
    packagingOptions {
        exclude 'LICENSE.txt'
    }
    productFlavors {
    }
}

dependencies {
    // Support-Library (ViewPager)
    compile 'com.android.support:support-v13:21.0.0'
    // ListView with headings
    compile 'com.tonicartos:superslim:0.4.13'
    // Calligraphy
    compile 'uk.co.chrisjenx:calligraphy:2.1.0'
    // ViewPager Indicators
    compile project(':libs:viewpager_indicators_lib')
    // Joda-Time
    compile 'joda-time:joda-time:2.7'
    // FloatingActionButton
    compile 'com.melnykov:floatingactionbutton:1.3.0'
    // Butter Knife
    compile 'com.jakewharton:butterknife:7.0.1'
    // Material Datetimepicker
    compile 'com.wdullaer:materialdatetimepicker:1.3.1'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-annotations:22.2.0'
    // Google Calendar
    compile 'com.android.support:appcompat-v7:22.1.1'
    compile 'com.google.android.gms:play-services:7.3.0'
    compile 'com.google.api-client:google-api-client:1.20.0'
    compile 'com.google.api-client:google-api-client-gson:1.20.0'
    compile 'com.google.api-client:google-api-client-android:1.20.0'
    compile 'com.google.oauth-client:google-oauth-client-jetty:1.20.0'
    compile 'com.google.apis:google-api-services-calendar:v3-rev125-1.20.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.okio:okio:1.5.0'
    // Espresso Testing
    //    androidTestCompile 'com.android.support.test:runner:0.3'
    //    androidTestCompile 'com.android.support.test:rules:0.3'
    //    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2'
    //    androidTestCompile 'com.android.support:support-annotations:22.2.0'
    //
    //    testCompile "org.robolectric:robolectric:3.0"
    //    androidTestCompile 'junit:junit:4.12'
}

task addTest {
    def src = ['src/test/java']
    def file = file("app.iml")
    doLast {
        try {
            def parsedXml = (new XmlParser()).parse(file)
            def node = parsedXml.component[1].content[0]
            def each = src.each {
                def path = 'file://$MODULE_DIR$/' + "${it}"
                def set = node.find {
                    it.@url == path
                }
                if (set == null) {
                    new Node(node, 'sourceFolder', [
                            'url': 'file://$MODULE_DIR$/' + "${it}",
                            'isTestSource': "true"
                    ])
                    def writer = new StringWriter()
                    new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
                    file.text = writer.toString()
                }
            }
            each
        } catch (FileNotFoundException e) {
            // nop, iml not found
        }
    }
}
 //always do the addtest on prebuild
gradle.projectsEvaluated { preBuild.dependsOn(addTest) }
